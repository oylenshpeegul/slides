#+OPTIONS: num:nil toc:nil
#+OPTIONS: timestamp:nil
#+REVEAL_THEME: night
#+Title: Patterns and Matching
#+Author: Tim Heaney
#+Email: oylenshpeegul@pm.me

* Agenda
** 18. Patterns and Matching
- 18.0. Review
- 18.1. All the Places Patterns Can Be Used
- 18.2. Refutability: Whether a Pattern Might Fail to Match
- 18.3. Pattern Syntax

  
* 18.0 Review
  
** Pattern Matching
- We saw some already in chapter 6: [[https://doc.rust-lang.org/stable/book/ch06-00-enums.html][Enums and Pattern Matching]]
- To imperative programmers, pattern matching might seem weird
- Functional programmers (OCaml, Elixir, F#, /&c./) will feel more at home

** Recall chapter 6, [[https://doc.rust-lang.org/stable/book/ch06-00-enums.html][Enums and Pattern Matching]]

 [[https://doc.rust-lang.org/stable/book/ch06-02-match.html][match]]

#+begin_src rust
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
#+end_src

** Enum with value

#+begin_src rust
enum UsState {
    Alabama,
    Alaska,
    ..
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}
#+end_src

** Match and bind to value

#+begin_src rust
fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("State quarter from {:?}!", state);
            25
        }
    }
}
#+end_src

** regular quarter

[[./regular-quarter.jpg]]

** state quarter

[[./north-dakota-quarter.jpg]]


** But we still have regular quarters...

#+begin_src rust
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(Option<UsState>),
}
#+end_src

** bicentennial quarter

[[./bicentennial-quarter.jpg]]

** model American change

#+begin_src rust
enum Series {
    Regular,
    Bicentennial,
    UsStates(UsState),
    UsTerritories(UsTerritory),
    AmericaTheBeautiful(NationalPark),
    AmericanWomen(Woman),
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(Series),
}
#+end_src

** Match an ~Option~

#+begin_src rust
fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        None => None,
        Some(i) => Some(i + 1),
    }
}
#+end_src

** Match with ~if let~

#+begin_src rust
fn plus_one(x: Option<i32>) -> Option<i32> {
    if let Some(i) = x {
        return Some(i + 1);
    }
    None
}
#+end_src

* 18.1 [[https://doc.rust-lang.org/stable/book/ch18-01-all-the-places-for-patterns.html][All the Places Patterns Can Be Used]]

** ~match~ arms

#+begin_src rust
match VALUE {
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
}
#+end_src

** conditional ~if let~ expressions

#+begin_src rust
if let PATTERN = VALUE {
    ...
}
#+end_src

** Note: ~if let~ is not exhaustive, but can have an ~else~ clause

#+begin_src rust
if let PATTERN = VALUE {
    ...
} else {
    ...
}
#+end_src

** ~while let~

#+begin_src rust
while let PATTERN = VALUE {
    ...
}
#+end_src

** While let example 

#+begin_src rust
while let Some(top) = stack.pop() {
    println!("{top}");
}
#+end_src

When the match fails, the loop ends.

** ~for~ loops

#+begin_src rust
for PATTERN in ITERATOR {
    ...
}
#+end_src

** For loop example

#+begin_src rust
let v = vec!['a', 'b', 'c'];

for (index, value) in v.iter().enumerate() {
    println!("{value} is at index {index}");
}
#+end_src

** ~let~ statements

#+begin_src rust
let PATTERN = VALUE;
#+end_src

** Let statement example

#+begin_src rust
  let t = (1, 2, 3);

  let (x, y, z) = t;

  println!("x: {x}, y: {y}, z: {z}");
#+end_src

** Error if it doesn't match

#+begin_src rust
  let t = (1, 2, 3);

  let (x, y) = t;

  println!("x: {x}, y: {y}");
#+end_src

** Compilation error, of course

#+begin_src
❯ cargo run
   Compiling pattern-matching v0.1.0 (/home/tim/rust/pattern-matching)
error[E0308]: mismatched types
  --> src/main.rs:19:9
   |
19 |     let (x, y) = t;
   |         ^^^^^^   - this expression has type `({integer}, {integer}, {integer})`
   |         |
   |         expected a tuple with 3 elements, found one with 2 elements
   |
   = note: expected tuple `({integer}, {integer}, {integer})`
              found tuple `(_, _)`

For more information about this error, try `rustc --explain E0308`.
error: could not compile `pattern-matching` due to previous error
#+end_src


** Assign to underscore so match succeeds

#+begin_src rust
  let t = (1, 2, 3);

  let (x, y, _) = t;

  println!("x: {x}, y: {y}");
#+end_src

** Function parameters

#+begin_src rust
fn name(PATTERN: TYPE) {
    ...
}
#+end_src

** Function parameters example

#+begin_src rust
fn print_coordinates(&(x, y): &(i32, i32)) {
    println!("Current location: ({x}, {y})");
}

fn main() {
    let point = (3, 5);
    print_coordinates(&point);
}
#+end_src

** Closures

#+begin_src rust
let print_coordinates = |&(x, y):  &(i32, i32)| {
    println!("Current location: ({x}, {y})");
};
#+end_src

** Assignments

As of [[https://blog.rust-lang.org/2022/02/24/Rust-1.59.0.html#destructuring-assignments][Rust 1.59]], we can use tuple, slice, and struct patterns as the left-hand side of an assignment.

#+begin_src rust
let (a, b, c, d, e);

(a, b) = (1, 2);
[c, .., d, _] = [1, 2, 3, 4, 5];
Struct { e, .. } = Struct { e: 5, f: 3 };

assert_eq!([1, 2, 1, 4, 5], [a, b, c, d, e]);
#+end_src

* 18.2 [[https://doc.rust-lang.org/stable/book/ch18-02-refutability.html][Refutability: Whether a Pattern Might Fail to Match]]

** Patterns come in two forms
- irrefutable
#+begin_src rust
let x = 5;
#+end_src

- refutable
#+begin_src rust
if let Some(x) = y {
    println!("{x}");
}
#+end_src

** Irrefutable
- Function parameters
- Let statements
- For loops

** Meant to be refutable
- if let
- while let

** Improperly using a refutable pattern is an /error/

#+begin_src rust
let Some(x) = y;
#+end_src

#+begin_src 
error[E0005]: refutable pattern in local binding: `None` not covered
   --> src/main.rs:41:9
    |
41  |     let Some(x) = y;
    |         ^^^^^^^ pattern `None` not covered
    |
...
#+end_src


** Improperly using an irrefutable pattern is a /warning/

#+begin_src rust
if let x = 5 {
    println!("{x}");
}
#+end_src

#+begin_src 
warning: irrefutable `if let` pattern
  --> src/main.rs:37:8
   |
37 |     if let x = 5 {
   |        ^^^^^^^^^
   |
...
#+end_src

** Match arms
- each arm must use a refutable pattern
- except last arm, which is irrefutable
- (last arm matches everything else)

*  18.3 [[https://doc.rust-lang.org/stable/book/ch18-03-pattern-syntax.html][Pattern Syntax]]

** matching literals

#+begin_src rust
let x = 1;

match x {
    1 => println!("one"),
    2 => println!("two"),
    3 => println!("three"),
    _ => println!("anything"),
}
#+end_src

** matching named variables

#+begin_src rust
let x = Some(5);
let y = 10;

match x {
    Some(50) => println!("Got 50"),
    Some(y) => println!("Matched, y = {y}"),
    _ => println!("Default case, x = {x:?}"),
}

println!("at the end: x = {x:?}, y = {y}");
#+end_src

** matching multiple patterns

use  | for /or/
  
#+begin_src rust
let x = 1;

match x {
    1 | 2 => println!("one or two"),
    3 => println!("three"),
    _ => println!("anything"),
}
#+end_src

** matching ranges

#+begin_src rust
let x = 5;

match x {
    1..=5 => println!("one through five"),
    _ => println!("something else"),
}
#+end_src

Nicer than ~1 | 2 | 3 | 4 | 5~

** ranges with characters

#+begin_src rust
let x = 'c';

match x {
    'a'..='j' => println!("early ASCII letter"),
    'k'..='z' => println!("late ASCII letter"),
    _ => println!("something else"),
}
#+end_src
  
- Ranges are only allowed with numeric values or ~char~ values

** Destructuring
- structs
- enums
- tuples
- references

** Destructuring structs

#+begin_src rust
  struct Point {
      x: i32,
      y: i32,
  }

  fn main() {
      let p = Point { x: 0, y: 7 };

      let Point { x: a, y: b } = p;
      assert_eq!(0, a);
      assert_eq!(7, b);
  }
#+end_src

** Shorthand

- When the variable names match the field names, we don't have to write the field names

#+begin_src rust
  struct Point {
      x: i32,
      y: i32,
  }

  fn main() {
      let p = Point { x: 0, y: 7 };

      let Point { x, y } = p;
      assert_eq!(0, x);
      assert_eq!(7, y);
  }
#+end_src

** Destructuring enums

#+begin_src rust
  enum Message {
      Quit,
      Move { x: i32, y: i32 },
      Write(String),
      ChangeColor(i32, i32, i32),
  }
#+end_src

** Destructuring enums 2

#+begin_src rust
  fn main() {
      let msg = Message::ChangeColor(0, 160, 255);
  ...
#+end_src

** Destructuring enums 3

#+begin_src rust
      match msg {
          Message::Quit => {
              println!("No data to destructure.")
          }
          Message::Move { x, y } => {
              println!("Move x {x} and y {y}")
          }
          Message::Write(text) => {
              println!("Text message: {text}")
          }
          Message::ChangeColor(r, g, b) => {
              println!("red {r}, green {g}, and blue {b}")
          }
      }
  }
#+end_src

** Destructuting nested structs and enums

#+begin_src rust
fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(Series::UsStates(state)) => {
            println!("State quarter from {:?}!", state);
            25
        },
        Coin::Quarter(_) => 25,
    }
}
#+end_src

** Destructuring tuples
#+begin_src rust
let t = (1, 2, 3);

let (x, y, z) = t;
    
println!("x: {x}, y: {y}, z: {z}");
#+end_src

** Destructuring references

#+begin_src rust
let reference = &3;

let &value = reference;

println!("value: {value}");
#+end_src

** Same as this

#+begin_src rust
let reference = &3;

let value = *reference;

println!("value: {value}");
#+end_src

** Ignoring values in a pattern
- Ignoring an entire value with underscore _
- Ignoring parts of a value with a nested _
- Ignoring an unused variable by starting its name with _
- Ignoring remaining parts of a value with ..


** Ignoring an entire value with underscore _

#+begin_src rust
fn foo(_: i32, y: i32) {
    println!("y parameter: {y}");
}
#+end_src


** Ignoring parts of a value with a nested _

#+begin_src rust
let t = (1, 2, 3);

match t {
    (1, y, _) => println!("x: 1, y: {y}"),
    _ => println!("no match"),
}
#+end_src

** Ignoring an unused variable by starting its name with _

#+begin_src rust
fn main() {
    let _x = 5; // no unused warning
    let y = 10; // unused variable warning
}
#+end_src

** But it still binds the variable!

This won't compile (~s~ is moved into ~_s~)

#+begin_src rust
let s = Some(String::from("Hello!"));

if let Some(_s) = s { 
    println!("found a string");
}

println!("{:?}", s);
#+end_src

** Underscore does not bind

This works fine!

#+begin_src rust
let s = Some(String::from("Hello!"));

if let Some(_) = s {
    println!("found a string");
}

println!("{:?}", s);
#+end_src


** Ignoring remaining parts of a value with ..

#+begin_src rust
let t = (1, 2, 3);

let (x, ..) = t;

println!("x: {x}");
#+end_src


** Match Guards

#+begin_src rust
let num = Some(4);

match num {
    Some(x) if x < 5 => println!("less than five: {x}"),
    Some(x) => println!("{x}"),
    None => (),
}
#+end_src

** @ Bindings

If we have this enum defined...

#+begin_src rust
  enum Message {
      Hello { id: i32 },
  }
#+end_src

** ...then this will print
"Found an id in range: 5"

#+begin_src rust
  let msg = Message::Hello { id: 5 };

  match msg {
      Message::Hello { id: id_value @ 3..=7 } => {
          println!("Found an id in range: {id_value}")
      },
      Message::Hello { id: 10..=12 } => {
          println!("Found an id in another range")
      }
      Message::Hello { id } => {
          println!("Found some other id: {id}")
      }
  }
#+end_src

** That last one 

#+begin_src rust
      Message::Hello { id } => {
          println!("Found some other id: {id}")
      }
#+end_src

is short-hand for

#+begin_src rust
      Message::Hello { id: id } => {
          println!("Found some other id: {id}")
      }
#+end_src

* More
- The Rust Reference
  + [[https://doc.rust-lang.org/reference/expressions/match-expr.html][Match expressions]]
  + [[https://doc.rust-lang.org/reference/patterns.html][Patterns]]
- Rust By Example
  + [[https://doc.rust-lang.org/rust-by-example/flow_control/match.html][match]]
  + [[https://doc.rust-lang.org/rust-by-example/flow_control/if_let.html][if let]]
  + [[https://doc.rust-lang.org/rust-by-example/flow_control/while_let.html][while let]]
  
* Thanks!
[[./tim.jpg]]
- [[https://twitter.com/oylenshpeegul][@oylenshpeegul]]
- oylenshpeegul@pm.me
